#!/bin/bash

# A Git credential helper which assists with handling GitHub authentication using
# Personal Access Tokens (PAT). For more details see:
# https://github.com/beacon-biosignals/gitlab-token-helper

protocol=https
host=github.com  # Only the hostname, no path
username=git

args=()
token_files=()
token_vars=()
while [[ $# -gt 0 ]]; do
  flag="$1"

  case $flag in
    -f|--file)
      token_files+=("$2")
      shift # remove flag
      shift # remove value
      ;;
    -e|--env)
      token_vars+=("$2")
      shift # remove flag
      shift # remove value
      ;;
    *)
      args+=("$1")
      shift # remove argument
      ;;
  esac
done

set -- "${args[@]}"  # restore unhandled parameters

if [ "${#token_files[@]}" -eq 0 ] && [ "${#token_vars[@]}" -eq 0 ]; then
    echo "Either --env/--file must be specified" >&2
    exit 1
fi

is_match=true
IFS='='
while read -r line; do
    [ "$line" == "" ] && break

    if [ "$is_match" == true ]; then
        read -r k v <<<"$line"
        if [ "$k" == "protocol" ] && [ "$v" != "$protocol" ]; then
            is_match=false
        elif [ "$k" == "host" ] && [ "$v" != "$host" ]; then
            is_match=false
        elif [ "$k" == "username" ]; then
            username="$v"
        elif [ "$k" == "password" ]; then
            is_match=false
        fi
    fi
done < /dev/stdin

if [ "$1" == "get" ] && [ "$is_match" == true ]; then
    # Read password information at the last second to avoid loading into memory
    # when we don't need it.

    # Prefer using the contents of a `token_var` if one is set
    for token_var in "${token_vars[@]}"; do
        password="${!token_var}"
        [ -n "$password" ] && break
    done

    # Fallback on using the first token file that exists
    if [ -z "$password" ]; then
        for token_file in "${token_files[@]}"; do
            if [ -f "$token_file" ]; then
                password="$(cat $token_file)"
                break
            fi
        done
    fi

    if [ -n "$password" ]; then
        echo "protocol=${protocol}"
        echo "host=${host}"
        echo "username=${username}"
        echo "password=${password}"
    else
        echo "Specified GitHub token(s) could not be found" >&2
        exit 1
    fi
fi
